from sys import modules
import discord
from discord.ext import commands
import requests
import random
import re

from modules.sendLadderPair import sendLadderPair
from modules.closeLadderGamesByDiscordTag import closeLadderGamesByDiscordTag
import modules.lists
import modules.config
bot = commands.Bot(command_prefix='.', intents = discord.Intents.all())


@bot.event
async def on_ready():
    await bot.change_presence(status=discord.Status.online, activity=discord.Game('.info'))
    print(f'Bot is online')


@bot.command(pass_context=True)
async def astrology(ctx):
    await ctx.send(f' {random.choice(modules.lists.astrology_list)}')


@bot.command(pass_context=True)
async def speak(ctx):
    await ctx.send(f' {random.choice(modules.lists.speak_list)}')


@bot.command(pass_context=True)
async def attack(ctx):
    author = ctx.message.author
    s = random.randint(0, 50)
    await ctx.send(f'{author.mention}, —Ç–≤–æ—è –∞—Ç–∞–∫–∞ - {s}')
    if s == 50:
        await ctx.send("–£ —Ç–µ–±—è —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –º–µ—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, %s" % bot.get_emoji(609013410948186162))
    if s == 0:
        await ctx.send('ü§èüèΩ ')


@bot.event
async def on_message(message):
    if str(message.channel) == 'rating-game-search':
        if modules.config.role_game_search in message.content:
            await message.add_reaction('‚öîÔ∏è')

    if str(message.channel) == '–æ—Å–Ω–æ–≤–Ω–æ–π':
        
        # if str(message.author) == 'zub#9433':
        #     if '–¥–æ–¥–∏–∫' in message.content.lower():
        #         random_5 = random.randint(0, 10)
        #         if random_5 == 0:
        #             await message.channel.send('–î–æ–¥–∏–∫? –ú–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–µ–Ω–≥ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω—è—Ç–µ–Ω –º–Ω–µ.')
        #         if random_5 == 1:
        #             await message.channel.send('–î–∏—Ä–µ–∫—Ç–æ—Ä –º–∏—Ä–∞, –Ω—É –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ, —è –≤–∞—Å —Å–æ–≤—Å–µ–º –Ω–µ —É–∑–Ω–∞—é!')
        #     if '–Ω–µ–≥–æ–¥—è–π' in message.content.lower():
        #         random_5 = random.randint(0, 10)
        #         if random_5 == 0:
        #             await message.channel.send('–ù–µ–≥–æ–¥—è–∏ –∏ –ø–æ–¥–ª–µ—Ü—ã, –≤—Å—ë –≤–µ—Ä–Ω–æ')
        #         if random_5 == 1:
        #             await message.channel.send('–ü–ª—É—Ç—ã –∏ –ø—Ä–æ–Ω—ã—Ä—ã')
        #     if '–ø–µ—Ä–¥–µ—Ç—å' in message.content.lower():
        #         random_5 = random.randint(0, 10)
        #         if random_5 == 0:
        #             await message.channel.send('–í—ã —É –Ω–∞—Å –æ—Ç —Ä—É–∫ –æ—Ç–±–∏–ª–∏—Å—å?')
        #         if random_5 == 1:
        #             await message.channel.send('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å—É–∂–¥–µ–Ω–∏–µ')
        #         if random_5 == 2:
        #             await message.channel.send('–ü–æ–∂–∏–ª–æ–π —á–ª–µ–Ω –ø–∞—Ä—Ç–∏–∏ –ø–µ—Ä–¥—è—â–∏—Ö –≤ –ª—É–∂—É?')
        
        if '–±–∞–ª–∞–Ω—Å–µ—Ä' in message.content.lower():
            random_5 = random.randint(0, 16)
            if random_5 == 0:
                await message.channel.send('–ë–∞–ª–∞–Ω—Å–µp ‚Äî —ç—Ç–æ –º—É–∂—á–∏–Ω–∞ —á–µ—Å—Ç–Ω–æ–π —Å—É–¥—å–±—ã.')
            if random_5 == 1:
                await message.channel.send('–ë–∞–ª–∞–Ω—Å–µp ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. ')
            if random_5 == 2:
                await message.channel.send(
                    '–ë–∞–ª–∞–Ω—Å–µp ‚Äî —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç —Ç–æ, —á—Ç–æ –¥—É–º–∞–µ—Ç, –∏ –¥–µ–ª–∞–µ—Ç —Ç–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç.')
            if random_5 == 3:
                await message.channel.send(
                    '–ë–∞–ª–∞–Ω—Å–µp ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ —Å–∞–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω, –Ω–æ –∏ –∫—Ç–æ —Å–≤–æ–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é —Å–ø–∞—Å–∞–µ—Ç –¥—Ä—É–≥–∏—Ö, –¥–∞–∂–µ —Ü–µ–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.')
    await bot.process_commands(message)


@bot.event
async def on_raw_reaction_add(payload):
    channel = discord.utils.get(bot.get_all_channels(), id=payload.channel_id)
    msg = await channel.fetch_message(id=payload.message_id)
    if modules.config.role_game_search in msg.content:
        print(msg.reactions)
        for reaction in msg.reactions:
            if (reaction.emoji == '‚öîÔ∏è' and reaction.me == True and reaction.count > 1 and payload.member != msg.author):
                # if (reaction.emoji == '‚öîÔ∏è' and reaction.me == True and reaction.count > 1 ):
                # if (reaction.emoji == '‚öîÔ∏è' and reaction.me == True and reaction.count == 2):
                print(msg.author)
                print(payload.member)
                author_msg = msg.author
                author_react = payload.member
                message = sendLadderPair([str(author_msg), str(author_react)])
                if message == 'ladder_successfully_created':
                    await channel.send('–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                if message == 'no_data':
                    await channel.send('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –¥–∏—Å–∫–æ—Ä–¥-—Ç–µ–≥)')
                if message == 'not_enough_data':
                    await channel.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ')
                if message == 'too_much_players_with_such_data':
                    await channel.send(
                        '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å–∫–æ—Ä–µ–µ-–≤—Å–µ–≥–æ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã —Å –≤–∞—à–∏–º –¥–∏—Å–∫–æ—Ä–¥-—Ç–µ–≥–æ–º)')
                s = "–º–µ–∂–¥—É {0} –∏ {1}".format(author_msg.mention, author_react.mention)
                await channel.send(s)
                await msg.delete()


@bot.command(pass_context=False)
async def top10(ctx):
    payload = {}
    headers = {}
    response = requests.request("GET", modules.config.url_top_10_users, headers=headers, data=payload)
    responseSerializeData = response.json()
    rating_user_list = responseSerializeData.get('DATA')
    print(rating_user_list)
    num = 0
    s = ''
    user = 0
    for user in rating_user_list:
        num += 1
        s += '{0} {1} {2}\n'.format(num, user.get('nickname'), user.get('rating'))
    await ctx.send(s)


@bot.command(pass_context=False)
async def bottom10(ctx):
    payload = {}
    headers = {}
    response = requests.request("GET", modules.config.url_1000_users, headers=headers, data=payload)
    responseSerializeData = response.json()
    rating_user_list = responseSerializeData.get('DATA')
    # print(rating_user_list[::-1])
    num = 0
    s = ''
    user = 0
    for user in rating_user_list[:-11:-1]:
        num += 1
        s += '{0} {1} {2}\n'.format(num, user.get('nickname'), user.get('rating'))
    await ctx.send(s)


@bot.command(pass_context=False)
async def rank(ctx):
    payload = {}
    headers = {}
    response = requests.request("GET", modules.config.url_1000_users, headers=headers, data=payload)
    responseSerializeData = response.json()
    rating_user_list = responseSerializeData.get('DATA')
    num = 0
    s = ''
    user = 0
    for user in rating_user_list:
        num += 1
        if (str(ctx.message.author)).split('#')[0] == str(user.get('nickname')):
            s += 'nick: **{0}**\nrating: **{1}**\nrank: **{2}**\n'.format(user.get('nickname'), user.get('rating'), num)
    await ctx.send(s)


@bot.command(pass_context=False)
async def prof(ctx):
    payload = {}
    headers = {}
    response = requests.request("GET", modules.config.url_1000_users, headers=headers, data=payload)
    responseSerializeData = response.json()
    rating_user_list = responseSerializeData.get('DATA')
    # print(rating_user_list)
    num = 0
    s = ''
    user = 0
    # print(Roles.keys)
    for user in rating_user_list:
        num += 1
        # if ((str(ctx.message.author)).split('#')[0]).lower() == (str(user.get('nickname'))).lower():
        if (str(ctx.message.author)).lower() == (str(user.get('discord'))).lower():
            s += 'nick: **{0}**\nrating: **{1}**\nrank: **{2}**\n'.format(user.get('nickname'), user.get('rating'), num)
            main_user = user.get('nickname')
            main_rating = user.get('rating')
            main_num = num
    
    user_roles = re.findall(r"(?<=name=').*?(?=')", str(ctx.message.author.roles))
    for role in modules.lists.rating_roles:
        if role in user_roles:
            main_role = role
    embed = discord.Embed(title=main_role, description=f"–†–µ–π—Ç–∏–Ω–≥: {main_rating} –ú–µ—Å—Ç–æ: {main_num}", color=0xaeba12)
    embed.set_author(name=main_user, icon_url=ctx.author.avatar_url)


    # embed.add_field(name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", value="–£–±–∏–π—Ü–∞ –¥—Ä–∞–∫–æ–Ω–æ–≤", inline=True)
    # embed.add_field(name="·Ö†", value="–ö–æ—Ä–æ–ª—å –≥–Ω–æ–º–æ–≤", inline=True)
    # embed.add_field(name="·Ö†", value="–ü—Ä–∏—è—Ç–Ω—ã–π", inline=True)
    # embed.add_field(name="–¢—É—Ä–Ω–∏—Ä—ã", value="–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π 2020 (3 –º–µ—Å—Ç–æ) \n –†–µ–∫—Ä—É—Ç—Å–∫–∏–π 2020 (2 –º–µ—Å—Ç–æ)", inline=False)
    # —Å–∞–º–∞—è –ª—É—á—à–∞—è —Ä–∞—Å–∞

    # embed.set_footer(text="text —Å–Ω–∏–∑—É")
    await ctx.send(embed=embed)


# embed.set_author(name = bot.user.name, icon_url = bot.user.avatar_url)
# # embed.set_footer(name = str(number) )
# # embed.set_image( icon_url = ctx.author.avatar_url )
# # embed.set_image( icon_url = ctx.author.avatar_url )

# @bot.command(pass_context = False)
# async def emoji(ctx):
# 	await ctx.send("–ö—É, %s" % bot.get_emoji(609013410948186162))
# 	# await ctx.send("–ö—É, %s" % bot.get_emoji(884696604056125470))


@bot.command(pass_context=True)
async def stop(ctx):
    messages = await ctx.channel.history(limit=200).flatten()
    author_command_stop = str(ctx.message.author)
    for msg in messages:
        # print(msg.author)
        # print(author_command_stop)
        if modules.config.role_game_search in msg.content and author_command_stop == str(msg.author):
            # print(1)
            # if author_command_stop == msg.author:
            # if str(msg.author) == author_command_stop:
            await msg.delete()

    message = closeLadderGamesByDiscordTag(str(ctx.author))

    if message == 'ladder_successfully_close':
        await ctx.send('–ê–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞')
    if message == 'player_has_no_open_ladder':
        await ctx.send('–£ –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤—Å—Ç—Ä–µ—á–∏')
    if message == 'player_not_found':
        await ctx.send('–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –¥–∏—Å–∫–æ—Ä–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    if message == 'no_data':
        await ctx.send(' –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ')


@bot.command(pass_context=False)
async def info(ctx):
    await ctx.send(modules.lists.info_message)


@bot.command(pass_context=False)
async def Gi(ctx):
    if str(ctx.author) == 'Persona#4190':
        await ctx.send(modules.lists.Giovanni_message)


bot.run(modules.config.token)